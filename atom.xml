<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yinyayun.github.io/</id>
    <title>殷亚云的博客</title>
    <updated>2019-07-25T04:02:21.734Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yinyayun.github.io/"/>
    <link rel="self" href="https://yinyayun.github.io//atom.xml"/>
    <subtitle>化身石桥，受五百年风吹雨打</subtitle>
    <logo>https://yinyayun.github.io//images/avatar.png</logo>
    <icon>https://yinyayun.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, 殷亚云的博客</rights>
    <entry>
        <title type="html"><![CDATA[Ray: A Distributed System for AI]]></title>
        <id>https://yinyayun.github.io//post/ray</id>
        <link href="https://yinyayun.github.io//post/ray">
        </link>
        <updated>2019-07-23T08:33:58.000Z</updated>
        <summary type="html"><![CDATA[<p>随着机器学习算法和技术的进步，越来越多的机器学习应用需要多台机器并行性执行。但是，在集群上进行机器学习的基础设施仍然是不够成熟的。虽然确实存在针对特定用例（例如，参数服务器或超参数搜索）和AI之外的高质量分布式系统的良好解决方案（例如，Hadoop或Spark），但是开发算法的从业者通常从头开始构建他们自己的系统基础结构。</p>
]]></summary>
        <content type="html"><![CDATA[<p>随着机器学习算法和技术的进步，越来越多的机器学习应用需要多台机器并行性执行。但是，在集群上进行机器学习的基础设施仍然是不够成熟的。虽然确实存在针对特定用例（例如，参数服务器或超参数搜索）和AI之外的高质量分布式系统的良好解决方案（例如，Hadoop或Spark），但是开发算法的从业者通常从头开始构建他们自己的系统基础结构。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[初识ZeroMQ]]></title>
        <id>https://yinyayun.github.io//post/qmx0wDoyT</id>
        <link href="https://yinyayun.github.io//post/qmx0wDoyT">
        </link>
        <updated>2019-07-11T01:50:57.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[VirtualBox Centos磁盘扩容笔记]]></title>
        <id>https://yinyayun.github.io//post/6_fDKITDK</id>
        <link href="https://yinyayun.github.io//post/6_fDKITDK">
        </link>
        <updated>2019-01-30T11:10:21.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker入门整理]]></title>
        <id>https://yinyayun.github.io//post/HjfEYHyRj</id>
        <link href="https://yinyayun.github.io//post/HjfEYHyRj">
        </link>
        <updated>2019-01-25T11:08:28.000Z</updated>
        <summary type="html"><![CDATA[<p>对开发和管理人员来说，docker是一个用容器开发、发布、运行应用程序的平台。Docker主要包含两个概念，镜像（Image）、容器（container）、Docker Registry：</p>
]]></summary>
        <content type="html"><![CDATA[<p>对开发和管理人员来说，docker是一个用容器开发、发布、运行应用程序的平台。Docker主要包含两个概念，镜像（Image）、容器（container）、Docker Registry：</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用JNI封装Faiss]]></title>
        <id>https://yinyayun.github.io//post/g0S9hEebM</id>
        <link href="https://yinyayun.github.io//post/g0S9hEebM">
        </link>
        <updated>2019-01-18T11:03:06.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[JNI开发整理]]></title>
        <id>https://yinyayun.github.io//post/mpuD1E0R5</id>
        <link href="https://yinyayun.github.io//post/mpuD1E0R5">
        </link>
        <updated>2019-01-08T11:00:49.000Z</updated>
        <summary type="html"><![CDATA[<p>在进行JNI开发之前，我们必须要了解下面一些东西，首先JNI开发的流程，再然后我们需要了解一下Native和Java中类型映射关系，以及JVM中已经为我们提供的一些常用JNI函数，最后再了解一下C/C++开发的一些注意事项。</p>
]]></summary>
        <content type="html"><![CDATA[<p>在进行JNI开发之前，我们必须要了解下面一些东西，首先JNI开发的流程，再然后我们需要了解一下Native和Java中类型映射关系，以及JVM中已经为我们提供的一些常用JNI函数，最后再了解一下C/C++开发的一些注意事项。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Faiss教程翻译]]></title>
        <id>https://yinyayun.github.io//post/JiVM3YKPA</id>
        <link href="https://yinyayun.github.io//post/JiVM3YKPA">
        </link>
        <updated>2018-12-27T10:41:18.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[点积量化(Product Quantizer)]]></title>
        <id>https://yinyayun.github.io//post/UjeaMrCsE</id>
        <link href="https://yinyayun.github.io//post/UjeaMrCsE">
        </link>
        <updated>2018-12-19T10:03:17.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>本文用例引用至 <a href="http://mccormickml.com/2017/10/13/product-quantizer-tutorial-part-1">product-quantizer-tutorial</a></p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>本文用例引用至 <a href="http://mccormickml.com/2017/10/13/product-quantizer-tutorial-part-1">product-quantizer-tutorial</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python module加载机制剖析]]></title>
        <id>https://yinyayun.github.io//post/jH_HzuYXb</id>
        <link href="https://yinyayun.github.io//post/jH_HzuYXb">
        </link>
        <updated>2018-12-17T10:01:50.000Z</updated>
        <summary type="html"><![CDATA[<p>之前实现了python module多版本动态加载，但是在最近一次一个小哥上传的模型中居然有对<code>.so</code>文件的import，十万只草泥马，Python居然还有这种操作，所以再一次对Python的import流程做了一次梳理。</p>
]]></summary>
        <content type="html"><![CDATA[<p>之前实现了python module多版本动态加载，但是在最近一次一个小哥上传的模型中居然有对<code>.so</code>文件的import，十万只草泥马，Python居然还有这种操作，所以再一次对Python的import流程做了一次梳理。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[记一次python段错误排查经历]]></title>
        <id>https://yinyayun.github.io//post/6wTmKR_f0</id>
        <link href="https://yinyayun.github.io//post/6wTmKR_f0">
        </link>
        <updated>2018-12-07T09:45:36.000Z</updated>
        <summary type="html"><![CDATA[<p>最近被python折腾惨了，所以分享一次segfault错误排查的经历。</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近被python折腾惨了，所以分享一次segfault错误排查的经历。</p>
]]></content>
    </entry>
</feed>